---
title: "propensity score final"
output: 
  html_document:
    number_sections: TRUE
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(include = TRUE, warning = FALSE, message = FALSE, echo = FALSE)
```

```{r import data, include = FALSE}
packages_list <- c('data.table', 'tidyverse', 'kableExtra', 'PSW', 'MASS', 'sandwich', 'mice') # 'MatchIt', 
new_packages <- packages_list[!(packages_list %in% installed.packages()[, 'Package'])]
if(length(new_packages)) install.packages(new_packages)
suppressMessages(lapply(packages_list, library, character.only=TRUE))
# load packages and functions needed
source("functions.R")

select <- dplyr::select
rbind <- base::rbind
kable <- knitr::kable

extractATE <- function(.psw) {
  .wt_estimator <- .psw[c("est.risk.wt", "std.risk.wt", "est.rr.wt", "std.rr.wt", "est.or.wt", "std.or.wt")] # list
  .wt_estimator <- data.frame(matrix(unlist(.wt_estimator), ncol = length(.wt_estimator)))
  colnames(.wt_estimator) <- c("est.risk.wt", "std.risk.wt", "est.rr.wt", "std.rr.wt", "est.or.wt", "std.or.wt")
  .wt_estimator
}

extractStdDiff <- function(.psw) {
  .df <- data.frame(
    Vars = row.names(.psw$std.diff.before),
    Before = unname(.psw$std.diff.before[, 5]),
    After = unname(.psw$std.diff.after[, 5])
  )
  .df
}

## MI estimates of treatment
# pool MI results
# https://stats.idre.ucla.edu/wp-content/uploads/2016/02/multipleimputation.pdf
PoolEstimates <- function(Q, U) {
  # Q is point estimate
  # U is variance estimate
  if (length(Q) != length(U)) {
    stop("Q and U are of different length")
  }

  m <- length(Q)
  Q_bar <- mean(Q)
  U_bar <- mean(U) # within-imputation variance
  B <- var(Q) # between-imputation variance
  tt <- U_bar + (1 + 1 / m) * B # total variance
  # vm <- (m - 1) * (1 + U_bar / ((1 + 1 / m) * B)) ^ 2 # degree of freedom
  .tmp <- c(Q_bar, tt)
  names(.tmp) <- c("Q_bar", "total_variance")
  return(.tmp)
}

# list.files(file.path("RData"))

# load data
load(file.path("RData", "ps_data.RData"))

best_formula_taxol <- "taxolpreg ~ I_HER2 + gadx_norm + I_TNBC + I_stage_34 + I_surgery + I_neoadjuvant + 
                neo_stage + gadx_surg + gadx_stage"

best_formula_gcsf <- "gfpreg ~ I_HER2 + gadx_norm + I_TNBC + I_stage_34 + I_surgery + I_neoadjuvant + 
                surg_stage + gadx_tnbc + tnbc_surg + tnbc_stage + tnbc_neo"
tbl1_vars <- c("age_norm", "gadx_norm", "I_stage_34", "I_TNBC", "I_HER2", "I_neoadjuvant", "I_surgery")
```

In randomized experiments, subjects are randomly assigned to each treatment group so that each covariate is balanced across groups. However, in observational studies, the assignment of treatments is not random. Some of the covariates could affect the decision of treatment, which causes the observed difference in the treatment outcome can not be fully attributed to the treatment effect. Propensity score matching is a method that attempts to estimate the probability of receiving treatment for each subject. Based on the estimated treatment probability, subjects are assigned different weights to reduce this bias. The difference in the treatment outcome is then comparable.

# Propensity score matching model

In our study, there are two treatment effects that we want to evaluate: taxanes and colony stimulating factors (CSF). For each treatment, we built a logistic regression, with the treatment as the dependent variable and patient characteristics as confounders. By fitting this model, we obtained the probability of receiving taxane/CSF for each subject, and rebalanced the confounders accordingly. The confounders are selected from Table 1, which include: age at diagnosis, gestational age at diagnosis, cancer stage, cancer type, timing of chemotherapy and whether they had breast surgery during pregnancy. The performance of rebalancing were evaluated by the standardized difference of each confounder. Standardized difference is a measure of the effect size of covariates between two groups. Generally speaking, it calculates the difference in means divided by standard error. There is no specific threshold, but an absolute effect size between 0\% and 20\% is usually considered small. 

We also added several interaction terms to the logistic models. To decide which interaction terms should be added, we listed all the possible two-way interaction combinations, fitted corresponding models and compared model performance by the largest standardized difference in each model. There are also several choices of weighting shcemes. We compared two weights in this study: average treatment effect weight (ATE) and matching weight (MW). For both treatments, MW provides smaller overall standardized differences, so we use MW in all the following results. The formulas we used to get the best performances are:

For taxane: I(taxane = 1) ~ I(type = HER2) + I(type = TNBC) + gestational age + I(stage = 3,4) + I(surgery = 1) + I(timing = neoadjuvant) + I(timing = neoadjuvant) \* I(stage = 3,4) + gestational age \* I(surgery = 1) + gestational age \* I(stage = 3, 4)

For CSF: I(CSF = 1) ~ I(type = HER2) + I(type = TNBC) + gestational age + I(stage = 3,4) + I(surgery = 1) + I(timing = neoadjuvant) + I(surgery = 1) \* I(stage = 3,4) + gestational age \* I(type = TNBC) + I(type = TNBC) \* I(surgery = 1) + I(type = TNBC) \* I(stage = 3,4) + I(type = TNBC) \* I(timing = neoadjuvant)

```{r ps model, } 
# fig.show = 'hide'
best_model_taxol <- psw(
  data = ps_data,
  form.ps = best_formula_taxol,
  weight = "MW",
  std.diff = TRUE,
  V.name = tbl1_vars
)

best_model_gcsf <- psw(
  data = ps_data,
  form.ps = best_formula_gcsf,
  weight = "MW",
  std.diff = TRUE,
  V.name = tbl1_vars
)

# output of glm model


# knitr::kable(
#   extractStdDiff(best_model_taxol),
#   digits = 2, booktabs = TRUE, 
#   caption = "Standardized differences before and after adjustment for taxane"
# ) %>% 
#   kable_classic(full_width = F, position = "center") 
# 
# 
# knitr::kable(
#   extractStdDiff(best_model_gcsf),
#   digits = 2, booktabs = TRUE, 
#   caption = "Standardized differences before and after adjustment for CSF"
# ) %>% 
#   kable_classic(full_width = F, position = "center") 

# knitr::kables(
#   list(
#     knitr::kable(
#       extractStdDiff(best_model_taxol),
#       digits = 2, valign = 't', booktabs = TRUE
#       ),
#     knitr::kable(
#       extractStdDiff(best_model_gcsf),
#       digits = 2, valign = 't'
#       )
#   ),
#   caption = "Standardized differences before and after adjustment (left: taxane, right: CSF)"
# ) %>% 
#   # kable_styling(latex_options = "scale_down", full_width = F)
#   kable_classic(full_width = F, position = "center", latex_options = "scale_down", font_size = 12)

```

# Average treatment effect model

The treatment effect of taxane\/CSF to obstetrical\/gestational outcomes could be evaluated by fitting separate weighted logistic regression models. In each model, we evaluate the effect of one treatment on one outcome. Each subject is assigned a weight based on its likelihood to receive treatment under investigation. Since there are many missingness in individual outcomes, we only evaluate treatment effect on composite obstetrical\/gestational outcomes. There are three ways to define composite outcomes:

1. If any individual outcome is positive, the composite outcome is positive; if any individual outcome is negative, the composite outcome is negative; else it's missing
2. If any individual outcome is positive, the composite outcome is positive; if all individual outcome is negative, the composite outcome is negative; else it's missing
3. Impute missingness in each individual outcome using multiple imputation (MI) method, then create composite outcomes the same way as method 1. For each individual outcome, we used 10 multiple imputations, with 25 iterations for each.

```{r create composite outcomes, include = FALSE}
# primary analysis: composite outcome is missing only if all individual outcomes are missing
ps_data$obstetrical <- apply(
  ps_data[, .SD, .SDcols = c("sptb", "pprom", "gdm", "pih", "chorio")],
  1,
  function(x) {
    ifelse(all(is.na(x)), # if all invidual outcomes are NA
           NA, # define as NA
           as.numeric(sum(x, na.rm = TRUE) > 0)) # else will be either 0 or 1
  }
)
# sensitivity analysis: composite outcome is missing if any individual outcome is missing
ps_data$obstetrical_sens <- apply(
  ps_data[, .SD, .SDcols = c("sptb", "pprom", "gdm", "pih", "chorio")],
  1,
  function(x) {
    ifelse(sum(x, na.rm = TRUE) > 0, # if any individual outcome is 1 
           1, # define as 1 
           ifelse(sum(is.na(x)) > 0, # else if any is NA  
                  NA, # define as NA 
                  0)) 
  } 
) 
ps_data$gestational <- apply(
  ps_data[, .SD, .SDcols = c("sga", "apgar5v7", "anomalies")],
  1,
  function(x) {
    ifelse(all(is.na(x)),
           NA,
           as.numeric(sum(x, na.rm = TRUE) > 0))
  }
)
ps_data$gestational_sens <- apply( 
 ps_data[, .SD, .SDcols = c("sga", "apgar5v7", "anomalies")],  
 1, 
 function(x) { 
   ifelse(sum(x, na.rm = TRUE) > 0, 
          1,  
          ifelse(sum(is.na(x)) > 0, 
                 NA, 
                 0)) 
   } 
) 

## MI 
mice_fit <- {
  .sub_data <- ps_data[, .SD, .SDcols = c(tbl1_vars, "sptb", "pprom", "gdm", "pih", "chorio", "sga", "apgar5v7", "anomalies")]
  # mice object
  .fit <- mice(
    data = .sub_data,
    m = 10, # number of MIs
    maxit = 25, # iteration
    seed = 42,
    method = "pmm"
  )
  .fit
}
# completed datasets
imputed_data <- mice::complete(mice_fit, "all") # a list
imputed_data <- lapply(imputed_data, function(d) {
  # create composite outcomes with imputed individual outcomes
  d$obstetrical <- apply(
    d[, c("sptb", "pprom", "gdm", "pih", "chorio")],
    1,
    function(x) {
             as.numeric(sum(x) > 0) 
      }
  )
  d$gestational <- apply(
    d[, c("sga", "apgar5v7", "anomalies")],
    1,
    function(x) {
      ifelse(all(is.na(x)),
             NA,
             as.numeric(sum(x, na.rm = TRUE) > 0))
    }
  )
  # add these two treatment variables to each dataset
  d$taxolpreg <- ps_data$taxolpreg
  d$gfpreg <- ps_data$gfpreg
  return (d)
})
```

```{r ATE model}
# outc_trt <- expand.grid(outc = c("obstetrical", "gestational", "obstetrical_sens", "gestational_sens"),
#             trt = c("taxolpreg", "gfpreg"))
# apply(outc_trt, 1, function(v) {
#   outc <- v[["outc"]]
#   trt <- v[["trt"]]
# }

ATE_composite <- sapply(c("obstetrical", "gestational", "obstetrical_sens", "gestational_sens"), function(outc) {
  sapply(c("taxolpreg", "gfpreg"), function(trt) {
    w <<- if (trt == "taxolpreg") ps_data$w_taxol_mw else ps_data$w_gcsf_mw
    # outc ~ trt
    .glm <- glm(
      formula = paste0(outc, " ~ ", trt),
      family = binomial,
      data = ps_data, 
      weights = w
    )
    # extract coefs
    .log_odds <- summary(.glm)$coefficients[trt, "Estimate"]
    .log_odds_var <- sandwich(.glm)[trt, trt]
    return(data.frame(
      est.log.or = .log_odds,
      std.log.or = sqrt(.log_odds_var))
    )
  }, simplify = FALSE, USE.NAMES = TRUE) %>% 
    rbindlist(., idcol = "Treatment")
}, simplify = FALSE, USE.NAMES = TRUE) %>%
  rbindlist(., idcol = "Outcome") %>% 
  mutate(
    est.or = exp(est.log.or),
    lower = exp(est.log.or - 1.96 * std.log.or),
    upper = exp(est.log.or + 1.96 * std.log.or)
  ) %>% 
  arrange(Treatment, Outcome)



ATE_composite_MI <- lapply(imputed_data, function(d) { # iterate over 10 imputed datasets
  # taxane
  tmp1 <- sapply(c("gestational", "obstetrical"), function(outc) { 
    # for each composite outcome, build glm, calculate odds ratio, 95% CI
    .glm <- glm(
      paste0(outc, " ~ taxolpreg"),
      family = binomial,
      data = d,
      weights = ps_data$w_taxol_mw
    )
    .log_odds <- summary(.glm)$coefficients["taxolpreg", "Estimate"]
    .log_odds_var <- sandwich(.glm)["taxolpreg", "taxolpreg"]
    return(data.frame(
      log.or = .log_odds,
      log.or.var = .log_odds_var
    ))
  }, simplify = FALSE, USE.NAMES = TRUE) %>% 
    rbindlist(., idcol = "Outcome") %>% 
    mutate(Treatment = "taxolpreg")
  # GCSF
  tmp2 <- sapply(c("gestational", "obstetrical"), function(outc) {
    .glm <- glm(
      paste0(outc, " ~ gfpreg"),
      family = binomial,
      data = d,
      weights = ps_data$w_gcsf_mw
    )
    .log_odds <- summary(.glm)$coefficients["gfpreg", "Estimate"]
    .log_odds_var <- sandwich(.glm)["gfpreg", "gfpreg"]
    return(data.frame(
      log.or = .log_odds,
      log.or.var = .log_odds_var
    ))
  }, simplify = FALSE, USE.NAMES = TRUE) %>% 
    rbindlist(., idcol = "Outcome") %>% 
    mutate(Treatment = "gfpreg")
  
  return(rbind(tmp1, tmp2)) # combine taxane and GCSF
}) %>% 
  rbindlist(., idcol = "Iter") %>% 
  group_by(Treatment, Outcome) %>% # combine results from 10 imputed datasets
  summarise(
    est.log.or = PoolEstimates(log.or, log.or.var)[1],
    std.log.or = sqrt(PoolEstimates(log.or, log.or.var)[2])
  ) %>% 
  mutate(
    est.or = exp(est.log.or), # convert from coef to odds ratio
    lower = exp(est.log.or - 1.96 * std.log.or),
    upper = exp(est.log.or + 1.96 * std.log.or)
  ) %>% 
  as.data.frame() %>% 
  mutate(Outcome = ifelse(Outcome == "obstetrical", 
                          "obstetrical_imputed", 
                          "gestational_imputed")
  )

ATE_overall <- rbind(ATE_composite %>% 
                       select(Outcome, Treatment, est.or, lower, upper),
                     ATE_composite_MI %>% 
                       select(Outcome, Treatment, est.or, lower, upper))

# For taxane
# taxane and obstetrical
ATE_overall %>%
  filter(Treatment == "taxolpreg" & str_detect(Outcome, "^obs")) %>% 
  select(Outcome, est.or, lower, upper) %>% 
  kable(digits = 2, col.names = c("Outcome", "Estimated odds ratio", "Lower 95% CI", "Upper 95% CI"),
        caption = "Estimated odds ratio for taxane chemotherapy on composite obstetrical outcomes") %>% 
  kable_classic(full_width = F, position = "center", latex_options = "scale_down", font_size = 12)
# taxane and gestational
ATE_overall %>%
  filter(Treatment == "taxolpreg" & str_detect(Outcome, "^ges")) %>% 
  select(Outcome, est.or, lower, upper) %>% 
  kable(digits = 2, col.names = c("Outcome", "Estimated odds ratio", "Lower 95% CI", "Upper 95% CI"),
        caption = "Estimated odds ratio for taxane chemotherapy on composite gestational outcomes") %>% 
  kable_classic(full_width = F, position = "center", latex_options = "scale_down", font_size = 12)
# GCSF and obstetrical
ATE_overall %>%
  filter(Treatment == "gfpreg" & str_detect(Outcome, "^obs")) %>% 
  select(Outcome, est.or, lower, upper) %>% 
  kable(digits = 2, col.names = c("Outcome", "Estimated odds ratio", "Lower 95% CI", "Upper 95% CI"),
        caption = "Estimated odds ratio for CSF chemotherapy on composite obstetrical outcomes") %>% 
  kable_classic(full_width = F, position = "center", latex_options = "scale_down", font_size = 12)
# GCSF and gestational
ATE_overall %>%
  filter(Treatment == "gfpreg" & str_detect(Outcome, "^ges")) %>% 
  select(Outcome, est.or, lower, upper) %>% 
  kable(digits = 2, col.names = c("Outcome", "Estimated odds ratio", "Lower 95% CI", "Upper 95% CI"),
        caption = "Estimated odds ratio for CSF chemotherapy on composite gestational outcomes") %>% 
  kable_classic(full_width = F, position = "center", latex_options = "scale_down", font_size = 12)
```

```{r estimate treatment effect, eval = FALSE, include = FALSE}
## two ways of getting odds ratio
# 1. output of PSW package
ATE_taxol <- sapply(c("gestational", "obstetrical"), function(outc) {
  # way 1
    .psw <- psw(
      data = as.data.frame(ps_data[!is.na(get(outc)), ]),
      form.ps = best_formula_taxol,
      weight = "MW", 
      wt = TRUE,
      out.var = outc,
      family = "binomial"
    )
  .odds_psw <- extractATE(.psw)[, c("est.or.wt", "std.or.wt")]
  # way 2
  .glm <- glm(
    paste0(outc, " ~ taxolpreg"),
    family = binomial,
    data = ps_data,
    weights = ps_data$w_taxol_mw
  )
  .log_odds <- summary(.glm)$coefficients["taxolpreg", "Estimate"]
  .log_odds_var <- sandwich(.glm)["taxolpreg", "taxolpreg"]
  .output <- data.frame(
    Method = c("PS matching", "Weighted GLM"),
    Odds.ratio = c(.odds_psw[["est.or.wt"]], exp(.log_odds)),
    Lower = c(.odds_psw[[1]] - 1.96 * .odds_psw[[2]], exp(.log_odds - 1.96 * sqrt(.log_odds_var))),
    Upper = c(.odds_psw[[1]] + 1.96 * .odds_psw[[2]], exp(.log_odds + 1.96 * sqrt(.log_odds_var)))
  )
  return (.output)
},
simplify = FALSE, USE.NAMES = TRUE) %>% 
  rbindlist(., idcol = "Outcome") 

ATE_taxol %>% 
  knitr::kable(align = "l", digits = 2, booktabs = TRUE,
               caption = "Odds ratio and 95% CI for Taxol treatment",
               col.names = c("Outcome", "Method", "Odds Ratio", "Lower CI", "Upper CI")) %>%
  kable_styling(bootstrap_options = c("striped", "hover", "condensed"), full_width = F, position = "center") %>% 
  collapse_rows(columns = 1, valign = "top")


ATE_gcsf <- sapply(c("gestational", "obstetrical"), function(outc) {
  # way 1
    .psw <- psw(
      data = as.data.frame(ps_data[!is.na(get(outc)), ]),
      form.ps = best_formula_gcsf,
      weight = "MW", 
      wt = TRUE,
      out.var = outc,
      family = "binomial"
    )
  .odds_psw <- extractATE(.psw)[, c("est.or.wt", "std.or.wt")]
  # way 2
  .glm <- glm(
    paste0(outc, " ~ gfpreg"),
    family = binomial,
    data = ps_data,
    weights = ps_data$w_gcsf_mw
  )
  .log_odds <- summary(.glm)$coefficients["gfpreg", "Estimate"]
  .log_odds_var <- sandwich(.glm)["gfpreg", "gfpreg"]
  .output <- data.frame(
    Method = c("PS matching", "Weighted GLM"),
    Odds.ratio = c(.odds_psw[["est.or.wt"]], exp(.log_odds)),
    Lower = c(.odds_psw[[1]] - 1.96 * .odds_psw[[2]], exp(.log_odds - 1.96 * sqrt(.log_odds_var))),
    Upper = c(.odds_psw[[1]] + 1.96 * .odds_psw[[2]], exp(.log_odds + 1.96 * sqrt(.log_odds_var)))
  )
  return (.output)
},
simplify = FALSE, USE.NAMES = TRUE) %>% 
  rbindlist(., idcol = "Outcome") 

ATE_gcsf %>% 
  knitr::kable(align = "l", digits = 2, booktabs = TRUE,
               caption = "Odds ratio and 95% CI for GCSF treatment",
               col.names = c("Outcome", "Method", "Odds Ratio", "Lower CI", "Upper CI")) %>%
  kable_styling(bootstrap_options = c("striped", "hover", "condensed"), full_width = F, position = "center") %>% 
  collapse_rows(columns = 1, valign = "top")


```




